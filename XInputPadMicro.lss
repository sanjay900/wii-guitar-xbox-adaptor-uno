
XInputPadMicro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800102  00800102  00000d78  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060df  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d26  00000000  00000000  00007153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b3a  00000000  00000000  00008e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  0000f9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d2f  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003997  00000000  00000000  00011e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000640  00000000  00000000  000157ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	be c0       	rjmp	.+380    	; 0x17e <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	35 c4       	rjmp	.+2154   	; 0x898 <__vector_11>
  2e:	00 00       	nop
  30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
  36:	00 00       	nop
  38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b1 c0       	rjmp	.+354    	; 0x1b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
  72:	00 00       	nop

00000074 <VersionString>:
  74:	08 03 31 00 2e 00 30 00 00 00                       ..1...0...

0000007e <ProductString>:
  7e:	40 03 57 00 69 00 69 00 20 00 43 00 6f 00 6e 00     @.W.i.i. .C.o.n.
  8e:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 20 00     t.r.o.l.l.e.r. .
  9e:	58 00 62 00 6f 00 78 00 20 00 41 00 64 00 61 00     X.b.o.x. .A.d.a.
  ae:	70 00 74 00 6f 00 72 00 00 00                       p.t.o.r...

000000b8 <ManufacturerString>:
  b8:	1a 03 73 00 61 00 6e 00 6a 00 61 00 79 00 39 00     ..s.a.n.j.a.y.9.
  c8:	30 00 30 00 00 00                                   0.0...

000000ce <LanguageString>:
  ce:	04 03 09 04                                         ....

000000d2 <ConfigurationDescriptor>:
  d2:	09 02 99 00 04 01 00 a0 fa 09 04 00 00 02 ff 5d     ...............]
  e2:	01 00 11 21 00 01 01 25 81 14 00 00 00 00 13 01     ...!...%........
  f2:	08 00 00 07 05 81 03 20 00 04 07 05 01 03 20 00     ....... ...... .
 102:	08 09 04 01 00 04 ff 5d 03 00 1b 21 00 01 01 01     .......]...!....
 112:	82 40 01 02 20 16 83 00 00 00 00 00 00 16 03 00     .@.. ...........
 122:	00 00 00 00 00 07 05 82 03 20 00 02 07 05 02 03     ......... ......
 132:	20 00 04 07 05 83 03 20 00 40 07 05 03 03 20 00      ...... .@.... .
 142:	10 09 04 02 00 01 ff 5d 02 00 09 21 00 01 01 22     .......]...!..."
 152:	84 07 00 07 05 84 03 20 00 10 09 04 03 00 00 ff     ....... ........
 162:	fd 13 04 06 41 00 01 01 03                          ....A....

0000016b <DeviceDescriptor>:
 16b:	12 01 00 02 ff ff ff 40 5e 04 8e 02 14 01 01 02     .......@^.......
 17b:	03 01 00                                            ...

0000017e <__ctors_end>:
 17e:	11 24       	eor	r1, r1
 180:	1f be       	out	0x3f, r1	; 63
 182:	cf ef       	ldi	r28, 0xFF	; 255
 184:	d2 e0       	ldi	r29, 0x02	; 2
 186:	de bf       	out	0x3e, r29	; 62
 188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_copy_data>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	e2 ee       	ldi	r30, 0xE2	; 226
 192:	fc e0       	ldi	r31, 0x0C	; 12
 194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x10>
 196:	05 90       	lpm	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	a2 30       	cpi	r26, 0x02	; 2
 19c:	b1 07       	cpc	r27, r17
 19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0xc>

000001a0 <__do_clear_bss>:
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	a2 e0       	ldi	r26, 0x02	; 2
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
 1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
 1aa:	a7 32       	cpi	r26, 0x27	; 39
 1ac:	b2 07       	cpc	r27, r18
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
 1b0:	50 d0       	rcall	.+160    	; 0x252 <main>
 1b2:	95 c5       	rjmp	.+2858   	; 0xcde <_exit>

000001b4 <__bad_interrupt>:
 1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <_Z10USART_Initj>:
// Initializes the USART to receive and transmit,
//  takes in a value you can find in the datasheet
//  based on desired communication and clock speeds
void USART_Init(uint16_t baudSetting){
	// Set baud rate
	UBRR1 = baudSetting;
 1b6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 1ba:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 1be:	88 e1       	ldi	r24, 0x18	; 24
 1c0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	// Set frame format: 8data, 1stop bit
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);	
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
}
 1ca:	08 95       	ret

000001cc <_Z10serialReadj>:
// This reads the USART serial port, returning any data that's in the
//  buffer, or a guaranteed zero if it took longer than timeout ms
//  Input: uint_16 timeout - milliseconds to wait for data before timing out
unsigned char serialRead( uint16_t timeout ){
	// Wait for data to be received 
	while ( !(UCSR1A & (1<<RXC1)) ){
 1cc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 1d0:	27 fd       	sbrc	r18, 7
 1d2:	0a c0       	rjmp	.+20     	; 0x1e8 <_Z10serialReadj+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	ef e9       	ldi	r30, 0x9F	; 159
 1d6:	ff e0       	ldi	r31, 0x0F	; 15
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z10serialReadj+0xc>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z10serialReadj+0x12>
 1de:	00 00       	nop
		_delay_ms(1);
		timeout--;
 1e0:	01 97       	sbiw	r24, 0x01	; 1
		if (timeout == 0){
 1e2:	a1 f7       	brne	.-24     	; 0x1cc <_Z10serialReadj>
			return 0b0;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
		}			
	}	
	// Get and return received data from buffer 
	return UDR1;
}
 1e6:	08 95       	ret
	return UDR1;
 1e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
 1ec:	08 95       	ret

000001ee <_Z11serialWriteh>:

// This sends out a byte of data via the USART.
void serialWrite( unsigned char data )
{
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) ){
 1ee:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 1f2:	95 ff       	sbrs	r25, 5
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <_Z11serialWriteh>
	}	
	// Put data into buffer, sends the data
	UDR1 = data;
 1f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
}
 1fa:	08 95       	ret

000001fc <_Z15flushSerialReadv>:

void flushSerialRead()
{
	unsigned char dummy;
	while ( UCSR1A & (1<<RXC1) )
 1fc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 200:	87 ff       	sbrs	r24, 7
 202:	03 c0       	rjmp	.+6      	; 0x20a <_Z15flushSerialReadv+0xe>
		dummy = UDR1;
 204:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
	while ( UCSR1A & (1<<RXC1) )
 208:	f9 cf       	rjmp	.-14     	; 0x1fc <_Z15flushSerialReadv>
}
 20a:	08 95       	ret

0000020c <_Z5LEDonc>:

// This turns on one of the LEDs hooked up to the chip
void LEDon(char ledNumber){
	DDRD |= 1 << ledNumber;
 20c:	4a b1       	in	r20, 0x0a	; 10
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <_Z5LEDonc+0xe>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z5LEDonc+0xa>
 21e:	cb 01       	movw	r24, r22
 220:	46 2b       	or	r20, r22
 222:	4a b9       	out	0x0a, r20	; 10
	PORTD &= ~(1 << ledNumber);
 224:	9b b1       	in	r25, 0x0b	; 11
 226:	80 95       	com	r24
 228:	89 23       	and	r24, r25
 22a:	8b b9       	out	0x0b, r24	; 11
}
 22c:	08 95       	ret

0000022e <_Z6LEDoffc>:

// And this turns it off
void LEDoff(char ledNumber){
	DDRD &= ~(1 << ledNumber);
 22e:	4a b1       	in	r20, 0x0a	; 10
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <_Z6LEDoffc+0xe>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <_Z6LEDoffc+0xa>
 240:	cb 01       	movw	r24, r22
 242:	96 2f       	mov	r25, r22
 244:	90 95       	com	r25
 246:	94 23       	and	r25, r20
 248:	9a b9       	out	0x0a, r25	; 10
	PORTD |= 1 << ledNumber;
 24a:	9b b1       	in	r25, 0x0b	; 11
 24c:	89 2b       	or	r24, r25
 24e:	8b b9       	out	0x0b, r24	; 11
}
 250:	08 95       	ret

00000252 <main>:
int main(void) {
	USART_Init(3);
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	af df       	rcall	.-162    	; 0x1b6 <_Z10USART_Initj>
	// Set clock @ 16Mhz
	CPU_PRESCALE(0);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 25e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>

	// Init XBOX pad emulation
	xbox_init(true);
 262:	81 e0       	ldi	r24, 0x01	; 1

	// Pins polling and gamepad status updates
	for (;;) {
		xbox_reset_watchdog();
 264:	ff d0       	rcall	.+510    	; 0x464 <xbox_init>
		LEDon(TXLED);
 266:	fc d0       	rcall	.+504    	; 0x460 <xbox_reset_watchdog>
 268:	85 e0       	ldi	r24, 0x05	; 5
		flushSerialRead();
 26a:	d0 df       	rcall	.-96     	; 0x20c <_Z5LEDonc>
		serialWrite(0);
 26c:	c7 df       	rcall	.-114    	; 0x1fc <_Z15flushSerialReadv>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	be df       	rcall	.-132    	; 0x1ee <_Z11serialWriteh>
		gamepad_state.digital_buttons_1 = serialRead(25);
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	aa df       	rcall	.-172    	; 0x1cc <_Z10serialReadj>
 278:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gamepad_state+0x2>
		serialWrite(1);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	b7 df       	rcall	.-146    	; 0x1ee <_Z11serialWriteh>
		gamepad_state.digital_buttons_2 = serialRead(25);
 280:	89 e1       	ldi	r24, 0x19	; 25
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	a3 df       	rcall	.-186    	; 0x1cc <_Z10serialReadj>
 286:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <gamepad_state+0x3>
		serialWrite(2);
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	b0 df       	rcall	.-160    	; 0x1ee <_Z11serialWriteh>
		gamepad_state.lt = serialRead(25)*2;
 28e:	89 e1       	ldi	r24, 0x19	; 25
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c df       	rcall	.-200    	; 0x1cc <_Z10serialReadj>
 294:	88 0f       	add	r24, r24
 296:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <gamepad_state+0x4>
		serialWrite(3);
 29a:	83 e0       	ldi	r24, 0x03	; 3
		gamepad_state.rt = serialRead(25)*2;
 29c:	a8 df       	rcall	.-176    	; 0x1ee <_Z11serialWriteh>
 29e:	89 e1       	ldi	r24, 0x19	; 25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	94 df       	rcall	.-216    	; 0x1cc <_Z10serialReadj>
 2a4:	88 0f       	add	r24, r24
 2a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <gamepad_state+0x5>
		serialWrite(4);
 2aa:	84 e0       	ldi	r24, 0x04	; 4
		gamepad_state.l_x = (serialRead(25)-128)*256;
 2ac:	a0 df       	rcall	.-192    	; 0x1ee <_Z11serialWriteh>
 2ae:	89 e1       	ldi	r24, 0x19	; 25
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	8c df       	rcall	.-232    	; 0x1cc <_Z10serialReadj>
 2b4:	80 58       	subi	r24, 0x80	; 128
 2b6:	99 0b       	sbc	r25, r25
 2b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <gamepad_state+0x6>
 2bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <gamepad_state+0x7>
		serialWrite(5);
 2c0:	85 e0       	ldi	r24, 0x05	; 5
		gamepad_state.l_y = (serialRead(25)-128)*256;
 2c2:	95 df       	rcall	.-214    	; 0x1ee <_Z11serialWriteh>
 2c4:	89 e1       	ldi	r24, 0x19	; 25
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	81 df       	rcall	.-254    	; 0x1cc <_Z10serialReadj>
 2ca:	80 58       	subi	r24, 0x80	; 128
 2cc:	99 0b       	sbc	r25, r25
 2ce:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <gamepad_state+0x8>
 2d2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <gamepad_state+0x9>
		serialWrite(7);
 2d6:	87 e0       	ldi	r24, 0x07	; 7
		gamepad_state.r_x = serialRead(25);
 2d8:	8a df       	rcall	.-236    	; 0x1ee <_Z11serialWriteh>
 2da:	89 e1       	ldi	r24, 0x19	; 25
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	76 df       	rcall	.-276    	; 0x1cc <_Z10serialReadj>
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <gamepad_state+0xb>
 2e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <gamepad_state+0xa>
		serialWrite(6);
 2ea:	86 e0       	ldi	r24, 0x06	; 6
		gamepad_state.r_x = (gamepad_state.r_x << 8 | serialRead(25))-32768;
 2ec:	80 df       	rcall	.-256    	; 0x1ee <_Z11serialWriteh>
 2ee:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <gamepad_state+0xa>
 2f2:	00 e0       	ldi	r16, 0x00	; 0
 2f4:	89 e1       	ldi	r24, 0x19	; 25
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	69 df       	rcall	.-302    	; 0x1cc <_Z10serialReadj>
 2fa:	98 01       	movw	r18, r16
 2fc:	28 2b       	or	r18, r24
 2fe:	c9 01       	movw	r24, r18
 300:	90 58       	subi	r25, 0x80	; 128
 302:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <gamepad_state+0xb>
		serialWrite(9);
 306:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <gamepad_state+0xa>
 30a:	89 e0       	ldi	r24, 0x09	; 9
		gamepad_state.r_y = serialRead(25);
 30c:	70 df       	rcall	.-288    	; 0x1ee <_Z11serialWriteh>
 30e:	89 e1       	ldi	r24, 0x19	; 25
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	5c df       	rcall	.-328    	; 0x1cc <_Z10serialReadj>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <gamepad_state+0xd>
		serialWrite(8);
 31a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <gamepad_state+0xc>
 31e:	88 e0       	ldi	r24, 0x08	; 8
		gamepad_state.r_y = (gamepad_state.r_y << 8 | serialRead(25))-32768;
 320:	66 df       	rcall	.-308    	; 0x1ee <_Z11serialWriteh>
 322:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <gamepad_state+0xc>
 326:	d3 2f       	mov	r29, r19
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	c8 2f       	mov	r28, r24
 32c:	89 e1       	ldi	r24, 0x19	; 25
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	4d df       	rcall	.-358    	; 0x1cc <_Z10serialReadj>
 332:	9e 01       	movw	r18, r28
 334:	28 2b       	or	r18, r24
 336:	c9 01       	movw	r24, r18
 338:	90 58       	subi	r25, 0x80	; 128
 33a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <gamepad_state+0xd>
 33e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <gamepad_state+0xc>
		LEDoff(TXLED);
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	74 df       	rcall	.-280    	; 0x22e <_Z6LEDoffc>
 346:	8a d0       	rcall	.+276    	; 0x45c <xbox_send_pad_state>
		xbox_send_pad_state();
 348:	8e cf       	rjmp	.-228    	; 0x266 <main+0x14>

0000034a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 34a:	29 2f       	mov	r18, r25
 34c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 34e:	22 30       	cpi	r18, 0x02	; 2
 350:	31 05       	cpc	r19, r1
 352:	41 f1       	breq	.+80     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x5a>
 354:	23 30       	cpi	r18, 0x03	; 3
 356:	31 05       	cpc	r19, r1
 358:	59 f0       	breq	.+22     	; 0x370 <CALLBACK_USB_GetDescriptor+0x26>
 35a:	21 30       	cpi	r18, 0x01	; 1
 35c:	31 05       	cpc	r19, r1
 35e:	39 f1       	breq	.+78     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x64>
	uint16_t    Size    = NO_DESCRIPTOR;
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	20 e0       	ldi	r18, 0x00	; 0
		}

			break;
	}

	*DescriptorAddress = Address;
 368:	fa 01       	movw	r30, r20
 36a:	31 83       	std	Z+1, r19	; 0x01
 36c:	20 83       	st	Z, r18
	return Size;
}
 36e:	08 95       	ret
			switch (DescriptorNumber)
 370:	99 27       	eor	r25, r25
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	91 05       	cpc	r25, r1
 376:	81 f0       	breq	.+32     	; 0x398 <CALLBACK_USB_GetDescriptor+0x4e>
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	41 f0       	breq	.+16     	; 0x38c <CALLBACK_USB_GetDescriptor+0x42>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 05       	cpc	r25, r1
 380:	71 f0       	breq	.+28     	; 0x39e <CALLBACK_USB_GetDescriptor+0x54>
 382:	03 97       	sbiw	r24, 0x03	; 3
 384:	69 f7       	brne	.-38     	; 0x360 <CALLBACK_USB_GetDescriptor+0x16>
					Size    = pgm_read_byte(&VersionString.Header.Size);
 386:	e4 e7       	ldi	r30, 0x74	; 116
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <CALLBACK_USB_GetDescriptor+0x46>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 38c:	ee ec       	ldi	r30, 0xCE	; 206
 38e:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&VersionString.Header.Size);
 390:	84 91       	lpm	r24, Z
 392:	90 e0       	ldi	r25, 0x00	; 0
					Address = &VersionString;
 394:	9f 01       	movw	r18, r30
					break;
 396:	e8 cf       	rjmp	.-48     	; 0x368 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 398:	e8 eb       	ldi	r30, 0xB8	; 184
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	f9 cf       	rjmp	.-14     	; 0x390 <CALLBACK_USB_GetDescriptor+0x46>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	ee e7       	ldi	r30, 0x7E	; 126
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	f6 cf       	rjmp	.-20     	; 0x390 <CALLBACK_USB_GetDescriptor+0x46>
			Size    = sizeof(ConfigurationDescriptor);
 3a4:	89 e9       	ldi	r24, 0x99	; 153
 3a6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 3a8:	22 ed       	ldi	r18, 0xD2	; 210
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	dd cf       	rjmp	.-70     	; 0x368 <CALLBACK_USB_GetDescriptor+0x1e>
			Size    = sizeof(DeviceDescriptor);
 3ae:	82 e1       	ldi	r24, 0x12	; 18
 3b0:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 3b2:	2b e6       	ldi	r18, 0x6B	; 107
 3b4:	31 e0       	ldi	r19, 0x01	; 1
 3b6:	d8 cf       	rjmp	.-80     	; 0x368 <CALLBACK_USB_GetDescriptor+0x1e>

000003b8 <EVENT_USB_Device_Connect>:
 3b8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <padUSBConnectEventCallback>
 3bc:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <padUSBConnectEventCallback+0x1>
 3c0:	30 97       	sbiw	r30, 0x00	; 0
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <EVENT_USB_Device_Connect+0xe>
 3c4:	09 94       	ijmp
 3c6:	08 95       	ret

000003c8 <EVENT_USB_Device_Disconnect>:
 3c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 3cc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 3d0:	30 97       	sbiw	r30, 0x00	; 0
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <EVENT_USB_Device_Disconnect+0xe>
 3d4:	09 94       	ijmp
 3d6:	08 95       	ret

000003d8 <EVENT_USB_Device_ConfigurationChanged>:
 3d8:	42 e2       	ldi	r20, 0x22	; 34
 3da:	61 ec       	ldi	r22, 0xC1	; 193
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	6b d1       	rcall	.+726    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
 3e0:	42 e2       	ldi	r20, 0x22	; 34
 3e2:	61 ec       	ldi	r22, 0xC1	; 193
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	67 c1       	rjmp	.+718    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>

000003e8 <EVENT_USB_Device_ControlRequest>:
 3e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_ControlRequest+0x1>
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	99 f4       	brne	.+38     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 3f0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest>
 3f4:	81 3a       	cpi	r24, 0xA1	; 161
 3f6:	79 f4       	brne	.+30     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 3f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3fc:	87 7f       	andi	r24, 0xF7	; 247
 3fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 402:	64 e1       	ldi	r22, 0x14	; 20
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	96 d0       	rcall	.+300    	; 0x538 <Endpoint_Write_Control_Stream_LE>
 40c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 410:	8b 77       	andi	r24, 0x7B	; 123
 412:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 416:	08 95       	ret

00000418 <HID_Task>:
 418:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
 41c:	84 30       	cpi	r24, 0x04	; 4
 41e:	99 f4       	brne	.+38     	; 0x446 <HID_Task+0x2e>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 42a:	80 ff       	sbrs	r24, 0
 42c:	0c c0       	rjmp	.+24     	; 0x446 <HID_Task+0x2e>
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	64 e1       	ldi	r22, 0x14	; 20
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	30 d0       	rcall	.+96     	; 0x49c <Endpoint_Write_Stream_LE>
 43c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 440:	8e 77       	andi	r24, 0x7E	; 126
 442:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 446:	08 95       	ret

00000448 <xbox_reset_pad_status>:
 448:	e6 e0       	ldi	r30, 0x06	; 6
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	84 e1       	ldi	r24, 0x14	; 20
 44e:	df 01       	movw	r26, r30
 450:	98 2f       	mov	r25, r24
 452:	1d 92       	st	X+, r1
 454:	9a 95       	dec	r25
 456:	e9 f7       	brne	.-6      	; 0x452 <xbox_reset_pad_status+0xa>
 458:	81 83       	std	Z+1, r24	; 0x01
 45a:	08 95       	ret

0000045c <xbox_send_pad_state>:
 45c:	dd df       	rcall	.-70     	; 0x418 <HID_Task>
 45e:	24 c4       	rjmp	.+2120   	; 0xca8 <USB_USBTask>

00000460 <xbox_reset_watchdog>:
 460:	a8 95       	wdr
 462:	08 95       	ret

00000464 <xbox_init>:
 464:	88 23       	and	r24, r24
 466:	71 f0       	breq	.+28     	; 0x484 <xbox_init+0x20>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 468:	88 e1       	ldi	r24, 0x18	; 24
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	a8 95       	wdr
 472:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 476:	0f be       	out	0x3f, r0	; 63
 478:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 47c:	e5 df       	rcall	.-54     	; 0x448 <xbox_reset_pad_status>
 47e:	fd d1       	rcall	.+1018   	; 0x87a <USB_Init>
 480:	78 94       	sei
 482:	08 95       	ret
 484:	0f b6       	in	r0, 0x3f	; 63
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 486:	f8 94       	cli
 488:	a8 95       	wdr
 48a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 48e:	88 61       	ori	r24, 0x18	; 24
 490:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 494:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 498:	0f be       	out	0x3f, r0	; 63
 49a:	f0 cf       	rjmp	.-32     	; 0x47c <xbox_init+0x18>

0000049c <Endpoint_Write_Stream_LE>:
 49c:	af 92       	push	r10
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 49e:	bf 92       	push	r11
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ff 92       	push	r15
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	6c 01       	movw	r12, r24
 4b0:	eb 01       	movw	r28, r22
 4b2:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 4b4:	53 d1       	rcall	.+678    	; 0x75c <Endpoint_WaitUntilReady>
 4b6:	f8 2e       	mov	r15, r24
 4b8:	81 11       	cpse	r24, r1
 4ba:	24 c0       	rjmp	.+72     	; 0x504 <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
 4bc:	01 15       	cp	r16, r1
 4be:	11 05       	cpc	r17, r1
 4c0:	39 f0       	breq	.+14     	; 0x4d0 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
 4c2:	f8 01       	movw	r30, r16
 4c4:	80 81       	ld	r24, Z
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	c8 1b       	sub	r28, r24
 4ca:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 4cc:	c8 0e       	add	r12, r24
 4ce:	d9 1e       	adc	r13, r25
{
 4d0:	b1 2c       	mov	r11, r1
 4d2:	a1 2c       	mov	r10, r1
	}

	while (Length)
 4d4:	20 97       	sbiw	r28, 0x00	; 0
 4d6:	b1 f0       	breq	.+44     	; 0x504 <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 4dc:	85 fd       	sbrc	r24, 5
 4de:	22 c0       	rjmp	.+68     	; 0x524 <Endpoint_Write_Stream_LE+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4e4:	8e 77       	andi	r24, 0x7E	; 126
 4e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 4ea:	de d3       	rcall	.+1980   	; 0xca8 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 4ec:	01 15       	cp	r16, r1
 4ee:	11 05       	cpc	r17, r1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
 4f2:	f8 01       	movw	r30, r16
 4f4:	80 81       	ld	r24, Z
 4f6:	91 81       	ldd	r25, Z+1	; 0x01
 4f8:	a8 0e       	add	r10, r24
 4fa:	b9 1e       	adc	r11, r25
 4fc:	b1 82       	std	Z+1, r11	; 0x01
 4fe:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 504:	8f 2d       	mov	r24, r15
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	bf 90       	pop	r11
 516:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
 518:	08 95       	ret
 51a:	20 d1       	rcall	.+576    	; 0x75c <Endpoint_WaitUntilReady>
 51c:	88 23       	and	r24, r24
 51e:	d1 f2       	breq	.-76     	; 0x4d4 <Endpoint_Write_Stream_LE+0x38>
 520:	f8 2e       	mov	r15, r24
 522:	f0 cf       	rjmp	.-32     	; 0x504 <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
 524:	f6 01       	movw	r30, r12
 526:	81 91       	ld	r24, Z+
 528:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 52a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			Length--;
 52e:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
 530:	ff ef       	ldi	r31, 0xFF	; 255
 532:	af 1a       	sub	r10, r31
 534:	bf 0a       	sbc	r11, r31
 536:	ce cf       	rjmp	.-100    	; 0x4d4 <Endpoint_Write_Stream_LE+0x38>

00000538 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 538:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 53a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x6>
 53e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_ControlRequest+0x7>
 542:	86 17       	cp	r24, r22
 544:	97 07       	cpc	r25, r23
 546:	a0 f0       	brcs	.+40     	; 0x570 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 548:	61 15       	cp	r22, r1
 54a:	71 05       	cpc	r23, r1
 54c:	29 f4       	brne	.+10     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 54e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 552:	9e 77       	andi	r25, 0x7E	; 126
 554:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 558:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	51 f4       	brne	.+20     	; 0x574 <Endpoint_Write_Control_Stream_LE+0x3c>
 560:	91 11       	cpse	r25, r1
 562:	08 c0       	rjmp	.+16     	; 0x574 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 564:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 568:	82 ff       	sbrs	r24, 2
 56a:	35 c0       	rjmp	.+106    	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	08 95       	ret
 570:	bc 01       	movw	r22, r24
 572:	f2 cf       	rjmp	.-28     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 574:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 578:	88 23       	and	r24, r24
 57a:	c9 f1       	breq	.+114    	; 0x5ee <Endpoint_Write_Control_Stream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 57c:	85 30       	cpi	r24, 0x05	; 5
 57e:	c9 f1       	breq	.+114    	; 0x5f2 <Endpoint_Write_Control_Stream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 584:	83 fd       	sbrc	r24, 3
 586:	31 c0       	rjmp	.+98     	; 0x5ea <Endpoint_Write_Control_Stream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
 58c:	82 fd       	sbrc	r24, 2
 58e:	ea cf       	rjmp	.-44     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 594:	80 ff       	sbrs	r24, 0
 596:	e1 cf       	rjmp	.-62     	; 0x55a <Endpoint_Write_Control_Stream_LE+0x22>
					return UEBCLX;
 598:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 59c:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 59e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <USB_Device_ControlEndpointSize>
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	61 15       	cp	r22, r1
 5a6:	71 05       	cpc	r23, r1
 5a8:	19 f0       	breq	.+6      	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0x78>
 5aa:	24 17       	cp	r18, r20
 5ac:	35 07       	cpc	r19, r21
 5ae:	58 f0       	brcs	.+22     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	42 17       	cp	r20, r18
 5b4:	53 07       	cpc	r21, r19
 5b6:	09 f0       	breq	.+2      	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x82>
 5b8:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5be:	2e 77       	andi	r18, 0x7E	; 126
 5c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5c4:	ca cf       	rjmp	.-108    	; 0x55a <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5c6:	81 91       	ld	r24, Z+
				UEDATX = Data;
 5c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
 5cc:	61 50       	subi	r22, 0x01	; 1
 5ce:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	3f 4f       	sbci	r19, 0xFF	; 255
 5d4:	e4 cf       	rjmp	.-56     	; 0x59e <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5da:	88 23       	and	r24, r24
 5dc:	41 f0       	breq	.+16     	; 0x5ee <Endpoint_Write_Control_Stream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	41 f0       	breq	.+16     	; 0x5f2 <Endpoint_Write_Control_Stream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 5e6:	83 ff       	sbrs	r24, 3
 5e8:	bd cf       	rjmp	.-134    	; 0x564 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
}
 5ec:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	08 95       	ret

000005f6 <Endpoint_Write_Control_PStream_LE>:
{
 5f6:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
 5f8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x6>
 5fc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_ControlRequest+0x7>
 600:	86 17       	cp	r24, r22
 602:	97 07       	cpc	r25, r23
 604:	a0 f0       	brcs	.+40     	; 0x62e <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
 606:	61 15       	cp	r22, r1
 608:	71 05       	cpc	r23, r1
 60a:	29 f4       	brne	.+10     	; 0x616 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 60c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 610:	8e 77       	andi	r24, 0x7E	; 126
 612:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 616:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
 618:	61 15       	cp	r22, r1
 61a:	71 05       	cpc	r23, r1
 61c:	51 f4       	brne	.+20     	; 0x632 <Endpoint_Write_Control_PStream_LE+0x3c>
 61e:	91 11       	cpse	r25, r1
 620:	08 c0       	rjmp	.+16     	; 0x632 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 622:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
 626:	82 ff       	sbrs	r24, 2
 628:	36 c0       	rjmp	.+108    	; 0x696 <Endpoint_Write_Control_PStream_LE+0xa0>
	return ENDPOINT_RWCSTREAM_NoError;
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret
 62e:	bc 01       	movw	r22, r24
 630:	f2 cf       	rjmp	.-28     	; 0x616 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 632:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 636:	88 23       	and	r24, r24
 638:	d1 f1       	breq	.+116    	; 0x6ae <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 63a:	85 30       	cpi	r24, 0x05	; 5
 63c:	d1 f1       	breq	.+116    	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 63e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 642:	83 fd       	sbrc	r24, 3
 644:	32 c0       	rjmp	.+100    	; 0x6aa <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 646:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
 64a:	82 fd       	sbrc	r24, 2
 64c:	ea cf       	rjmp	.-44     	; 0x622 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 652:	80 ff       	sbrs	r24, 0
 654:	e1 cf       	rjmp	.-62     	; 0x618 <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
 656:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 65a:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 65c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <USB_Device_ControlEndpointSize>
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	61 15       	cp	r22, r1
 664:	71 05       	cpc	r23, r1
 666:	19 f0       	breq	.+6      	; 0x66e <Endpoint_Write_Control_PStream_LE+0x78>
 668:	24 17       	cp	r18, r20
 66a:	35 07       	cpc	r19, r21
 66c:	58 f0       	brcs	.+22     	; 0x684 <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	42 17       	cp	r20, r18
 672:	53 07       	cpc	r21, r19
 674:	09 f0       	breq	.+2      	; 0x678 <Endpoint_Write_Control_PStream_LE+0x82>
 676:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 678:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 67c:	8e 77       	andi	r24, 0x7E	; 126
 67e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 682:	ca cf       	rjmp	.-108    	; 0x618 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 684:	84 91       	lpm	r24, Z
				UEDATX = Data;
 686:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 68a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 68c:	61 50       	subi	r22, 0x01	; 1
 68e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 690:	2f 5f       	subi	r18, 0xFF	; 255
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	e3 cf       	rjmp	.-58     	; 0x65c <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 696:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 69a:	88 23       	and	r24, r24
 69c:	41 f0       	breq	.+16     	; 0x6ae <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 69e:	85 30       	cpi	r24, 0x05	; 5
 6a0:	41 f0       	breq	.+16     	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
 6a6:	83 ff       	sbrs	r24, 3
 6a8:	bc cf       	rjmp	.-136    	; 0x622 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
}
 6ac:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	08 95       	ret

000006b6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6b6:	98 2f       	mov	r25, r24
 6b8:	95 30       	cpi	r25, 0x05	; 5
 6ba:	28 f0       	brcs	.+10     	; 0x6c6 <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6bc:	8f 70       	andi	r24, 0x0F	; 15
 6be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	08 95       	ret
 6c6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			UECFG1XTemp = UECFG1XData;
 6ca:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
 6cc:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
 6ce:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
 6d0:	98 17       	cp	r25, r24
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
 6d4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			UECFG1XTemp = UECFG1X;
 6d8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
			UEIENXTemp  = UEIENX;
 6dc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
 6e0:	21 fd       	sbrc	r18, 1
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6e4:	9f 5f       	subi	r25, 0xFF	; 255
 6e6:	e8 cf       	rjmp	.-48     	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 6e8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 6ec:	3e 7f       	andi	r19, 0xFE	; 254
 6ee:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG1X &= ~(1 << ALLOC);
 6f2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 6f6:	3d 7f       	andi	r19, 0xFD	; 253
 6f8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX |= (1 << EPEN);
 6fc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 700:	31 60       	ori	r19, 0x01	; 1
 702:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG0X = UECFG0XTemp;
 706:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
		UECFG1X = UECFG1XTemp;
 70a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
		UEIENX  = UEIENXTemp;
 70e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 712:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
		if (!(Endpoint_IsConfigured()))
 716:	27 fd       	sbrc	r18, 7
 718:	e5 cf       	rjmp	.-54     	; 0x6e4 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
 71a:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
 71c:	08 95       	ret

0000071e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 71e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest>
 722:	87 ff       	sbrs	r24, 7
 724:	13 c0       	rjmp	.+38     	; 0x74c <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 726:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 72a:	82 ff       	sbrs	r24, 2
 72c:	06 c0       	rjmp	.+12     	; 0x73a <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 72e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 732:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 734:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 738:	04 c0       	rjmp	.+8      	; 0x742 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 73a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
 73e:	81 11       	cpse	r24, r1
 740:	f2 cf       	rjmp	.-28     	; 0x726 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 742:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 744:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
 748:	88 23       	and	r24, r24
 74a:	d9 f3       	breq	.-10     	; 0x742 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 74c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
 750:	80 ff       	sbrs	r24, 0
 752:	f8 cf       	rjmp	.-16     	; 0x744 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 758:	8e 77       	andi	r24, 0x7E	; 126
 75a:	ec cf       	rjmp	.-40     	; 0x734 <Endpoint_ClearStatusStage+0x16>

0000075c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 75c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 760:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 764:	85 e6       	ldi	r24, 0x65	; 101
 766:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 768:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 76c:	90 ff       	sbrs	r25, 0
 76e:	06 c0       	rjmp	.+12     	; 0x77c <Endpoint_WaitUntilReady+0x20>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 770:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 774:	90 ff       	sbrs	r25, 0
 776:	06 c0       	rjmp	.+12     	; 0x784 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 780:	92 fd       	sbrc	r25, 2
 782:	fa cf       	rjmp	.-12     	; 0x778 <Endpoint_WaitUntilReady+0x1c>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 784:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 788:	99 23       	and	r25, r25
 78a:	89 f0       	breq	.+34     	; 0x7ae <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 78c:	95 30       	cpi	r25, 0x05	; 5
 78e:	89 f0       	breq	.+34     	; 0x7b2 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 790:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 794:	95 fd       	sbrc	r25, 5
 796:	0f c0       	rjmp	.+30     	; 0x7b6 <Endpoint_WaitUntilReady+0x5a>
 798:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 79c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7a0:	42 17       	cp	r20, r18
 7a2:	53 07       	cpc	r21, r19
 7a4:	09 f3       	breq	.-62     	; 0x768 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	f1 f6       	brne	.-68     	; 0x766 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 7aa:	84 e0       	ldi	r24, 0x04	; 4
 7ac:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 7b2:	83 e0       	ldi	r24, 0x03	; 3
 7b4:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7b6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 7b8:	08 95       	ret

000007ba <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <USB_ResetInterface+0x6>
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7c4:	63 d0       	rcall	.+198    	; 0x88c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7c6:	65 d0       	rcall	.+202    	; 0x892 <USB_INT_ClearAllInterrupts>
 7c8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7cc:	8f 77       	andi	r24, 0x7F	; 127
 7ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7d2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 7d6:	80 68       	ori	r24, 0x80	; 128
 7d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7dc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
 7e0:	8f 7d       	andi	r24, 0xDF	; 223
 7e2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7e6:	84 e0       	ldi	r24, 0x04	; 4
				PLLCSR = USB_PLL_PSC;
 7e8:	89 bd       	out	0x29, r24	; 41
 7ea:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7ec:	89 bd       	out	0x29, r24	; 41
 7ee:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7f0:	00 fe       	sbrs	r0, 0
 7f2:	fd cf       	rjmp	.-6      	; 0x7ee <USB_ResetInterface+0x34>
 7f4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7f8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 7fc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 800:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 804:	ae 01       	movw	r20, r28
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
 806:	4f 5f       	subi	r20, 0xFF	; 255
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	9c dd       	rcall	.-1224   	; 0x34a <CALLBACK_USB_GetDescriptor>
 812:	89 2b       	or	r24, r25
 814:	31 f0       	breq	.+12     	; 0x822 <USB_ResetInterface+0x68>
 816:	e9 81       	ldd	r30, Y+1	; 0x01
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 818:	fa 81       	ldd	r31, Y+2	; 0x02
 81a:	37 96       	adiw	r30, 0x07	; 7
 81c:	e4 91       	lpm	r30, Z
 81e:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <USB_Device_ControlEndpointSize>
 822:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <USB_Device_ControlEndpointSize>
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	88 e0       	ldi	r24, 0x08	; 8
				uint16_t CheckBytes = 8;
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	40 e0       	ldi	r20, 0x00	; 0
				uint8_t  MaskVal    = 0;
 82e:	82 17       	cp	r24, r18
				while (CheckBytes < Bytes)
 830:	93 07       	cpc	r25, r19
 832:	f8 f0       	brcs	.+62     	; 0x872 <USB_ResetInterface+0xb8>
 834:	42 95       	swap	r20
				return (MaskVal << EPSIZE0);
 836:	40 7f       	andi	r20, 0xF0	; 240
 838:	42 60       	ori	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	3b df       	rcall	.-394    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
 840:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 844:	8e 7f       	andi	r24, 0xFE	; 254
 846:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 84a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 854:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
 858:	88 60       	ori	r24, 0x08	; 8
 85a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 85e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
 862:	8e 7f       	andi	r24, 0xFE	; 254
 864:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 868:	0f 90       	pop	r0
}
 86a:	0f 90       	pop	r0
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret
 872:	4f 5f       	subi	r20, 0xFF	; 255
					MaskVal++;
 874:	88 0f       	add	r24, r24
					CheckBytes <<= 1;
 876:	99 1f       	adc	r25, r25
 878:	da cf       	rjmp	.-76     	; 0x82e <USB_ResetInterface+0x74>

0000087a <USB_Init>:
 87a:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	8e 7f       	andi	r24, 0xFE	; 254
 882:	80 83       	st	Z, r24
	USB_IsInitialized = true;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_IsInitialized>
	USB_ResetInterface();
 88a:	97 cf       	rjmp	.-210    	; 0x7ba <USB_ResetInterface>

0000088c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 88c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
 890:	08 95       	ret

00000892 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 892:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
 896:	08 95       	ret

00000898 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	ef 93       	push	r30
 8b8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8be:	82 ff       	sbrs	r24, 2
 8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
 8c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8c6:	82 ff       	sbrs	r24, 2
 8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
 8ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8ce:	8b 7f       	andi	r24, 0xFB	; 251
 8d0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8d4:	e8 d1       	rcall	.+976    	; 0xca6 <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
 8d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8da:	80 ff       	sbrs	r24, 0
 8dc:	17 c0       	rjmp	.+46     	; 0x90c <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
 8de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8e2:	80 ff       	sbrs	r24, 0
 8e4:	13 c0       	rjmp	.+38     	; 0x90c <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
 8e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8ea:	8e 7f       	andi	r24, 0xFE	; 254
 8ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 8f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8f4:	80 61       	ori	r24, 0x10	; 16
 8f6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 8fe:	80 62       	ori	r24, 0x20	; 32
 900:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
 904:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 906:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 90a:	5e dd       	rcall	.-1348   	; 0x3c8 <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
 90c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 910:	84 ff       	sbrs	r24, 4
 912:	28 c0       	rjmp	.+80     	; 0x964 <__vector_11+0xcc>
						return (UDIEN  & (1 << WAKEUPE));
 914:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 918:	84 ff       	sbrs	r24, 4
 91a:	24 c0       	rjmp	.+72     	; 0x964 <__vector_11+0xcc>
				PLLCSR = USB_PLL_PSC;
 91c:	84 e0       	ldi	r24, 0x04	; 4
 91e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 920:	86 e0       	ldi	r24, 0x06	; 6
 922:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 924:	09 b4       	in	r0, 0x29	; 41
 926:	00 fe       	sbrs	r0, 0
 928:	fd cf       	rjmp	.-6      	; 0x924 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 92a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 92e:	8f 7d       	andi	r24, 0xDF	; 223
 930:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
 934:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 938:	8f 7e       	andi	r24, 0xEF	; 239
 93a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 93e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 942:	8f 7e       	andi	r24, 0xEF	; 239
 944:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
 948:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 94c:	81 60       	ori	r24, 0x01	; 1
 94e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 952:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_Device_ConfigurationNumber>
 956:	88 23       	and	r24, r24
 958:	09 f4       	brne	.+2      	; 0x95c <__vector_11+0xc4>
 95a:	46 c0       	rjmp	.+140    	; 0x9e8 <__vector_11+0x150>
		  USB_DeviceState = DEVICE_STATE_Configured;
 95c:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 95e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 962:	2a dd       	rcall	.-1452   	; 0x3b8 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
 964:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 968:	83 ff       	sbrs	r24, 3
 96a:	2d c0       	rjmp	.+90     	; 0x9c6 <__vector_11+0x12e>
						return (UDIEN  & (1 << EORSTE));
 96c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 970:	83 ff       	sbrs	r24, 3
 972:	29 c0       	rjmp	.+82     	; 0x9c6 <__vector_11+0x12e>
						UDINT  &= ~(1 << EORSTI);
 974:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 978:	87 7f       	andi	r24, 0xF7	; 247
 97a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 984:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
 988:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 98c:	8e 7f       	andi	r24, 0xFE	; 254
 98e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
 992:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 996:	8e 7f       	andi	r24, 0xFE	; 254
 998:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
 99c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 9a0:	80 61       	ori	r24, 0x10	; 16
 9a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 9a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <USB_Device_ControlEndpointSize>
 9aa:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 9ac:	88 e0       	ldi	r24, 0x08	; 8
 9ae:	90 e0       	ldi	r25, 0x00	; 0
				uint8_t  MaskVal    = 0;
 9b0:	40 e0       	ldi	r20, 0x00	; 0

				while (CheckBytes < Bytes)
 9b2:	82 17       	cp	r24, r18
 9b4:	93 07       	cpc	r25, r19
 9b6:	00 f1       	brcs	.+64     	; 0x9f8 <__vector_11+0x160>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 9b8:	42 95       	swap	r20
 9ba:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9bc:	42 60       	ori	r20, 0x02	; 2
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9c2:	79 de       	rcall	.-782    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
 9c4:	70 d1       	rcall	.+736    	; 0xca6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9e8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9ec:	87 fd       	sbrc	r24, 7
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__vector_11+0x15c>
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	b5 cf       	rjmp	.-150    	; 0x95e <__vector_11+0xc6>
 9f4:	83 e0       	ldi	r24, 0x03	; 3
 9f6:	b3 cf       	rjmp	.-154    	; 0x95e <__vector_11+0xc6>
					MaskVal++;
 9f8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	d9 cf       	rjmp	.-78     	; 0x9b2 <__vector_11+0x11a>

00000a00 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	aa 97       	sbiw	r28, 0x2a	; 42
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	de bf       	out	0x3e, r29	; 62
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a16:	8f e1       	ldi	r24, 0x1F	; 31
 a18:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a1a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a1e:	fc 01       	movw	r30, r24
 a20:	21 93       	st	Z+, r18
 a22:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a24:	f1 e0       	ldi	r31, 0x01	; 1
 a26:	87 32       	cpi	r24, 0x27	; 39
 a28:	9f 07       	cpc	r25, r31
 a2a:	b9 f7       	brne	.-18     	; 0xa1a <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 a2c:	dd dc       	rcall	.-1606   	; 0x3e8 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 a32:	83 ff       	sbrs	r24, 3
 a34:	11 c0       	rjmp	.+34     	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a36:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 a3a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_ControlRequest+0x1>
 a3e:	85 30       	cpi	r24, 0x05	; 5
 a40:	09 f4       	brne	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0x44>
 a42:	bd c0       	rjmp	.+378    	; 0xbbe <USB_Device_ProcessControlRequest+0x1be>
 a44:	08 f5       	brcc	.+66     	; 0xa88 <USB_Device_ProcessControlRequest+0x88>
 a46:	81 30       	cpi	r24, 0x01	; 1
 a48:	09 f4       	brne	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x4c>
 a4a:	89 c0       	rjmp	.+274    	; 0xb5e <USB_Device_ProcessControlRequest+0x15e>
 a4c:	88 23       	and	r24, r24
 a4e:	09 f4       	brne	.+2      	; 0xa52 <USB_Device_ProcessControlRequest+0x52>
 a50:	61 c0       	rjmp	.+194    	; 0xb14 <USB_Device_ProcessControlRequest+0x114>
 a52:	83 30       	cpi	r24, 0x03	; 3
 a54:	09 f4       	brne	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
 a56:	83 c0       	rjmp	.+262    	; 0xb5e <USB_Device_ProcessControlRequest+0x15e>
 a58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a5c:	83 ff       	sbrs	r24, 3
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <USB_Device_ProcessControlRequest+0x74>
				UEINTX &= ~(1 << RXSTPI);
 a60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a64:	87 7f       	andi	r24, 0xF7	; 247
 a66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
 a6a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a6e:	80 62       	ori	r24, 0x20	; 32
 a70:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a74:	aa 96       	adiw	r28, 0x2a	; 42
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	08 95       	ret
 a88:	88 30       	cpi	r24, 0x08	; 8
 a8a:	09 f4       	brne	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x8e>
 a8c:	cd c0       	rjmp	.+410    	; 0xc28 <USB_Device_ProcessControlRequest+0x228>
 a8e:	89 30       	cpi	r24, 0x09	; 9
 a90:	09 f4       	brne	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0x94>
 a92:	d7 c0       	rjmp	.+430    	; 0xc42 <USB_Device_ProcessControlRequest+0x242>
 a94:	86 30       	cpi	r24, 0x06	; 6
 a96:	01 f7       	brne	.-64     	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a98:	90 58       	subi	r25, 0x80	; 128
 a9a:	92 30       	cpi	r25, 0x02	; 2
 a9c:	e8 f6       	brcc	.-70     	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a9e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest+0x2>
 aa2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <USB_ControlRequest+0x3>
 aa6:	8c 3d       	cpi	r24, 0xDC	; 220
 aa8:	23 e0       	ldi	r18, 0x03	; 3
 aaa:	92 07       	cpc	r25, r18
 aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0xb0>
 aae:	a9 c0       	rjmp	.+338    	; 0xc02 <USB_Device_ProcessControlRequest+0x202>
	SignatureDescriptor.Header.Type = DTYPE_String;
 ab0:	83 e0       	ldi	r24, 0x03	; 3
 ab2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ab4:	8a e2       	ldi	r24, 0x2A	; 42
 ab6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ab8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aba:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 abc:	de 01       	movw	r26, r28
 abe:	13 96       	adiw	r26, 0x03	; 3
 ac0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 ac2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ac4:	51 e2       	ldi	r21, 0x21	; 33
 ac6:	e3 2f       	mov	r30, r19
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 ace:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 ad0:	20 ff       	sbrs	r18, 0
 ad2:	03 c0       	rjmp	.+6      	; 0xada <USB_Device_ProcessControlRequest+0xda>
					{
						SerialByte >>= 4;
 ad4:	e2 95       	swap	r30
 ad6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ad8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ada:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 adc:	8e 2f       	mov	r24, r30
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	ea 30       	cpi	r30, 0x0A	; 10
 ae2:	08 f4       	brcc	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0xe6>
 ae4:	8c c0       	rjmp	.+280    	; 0xbfe <USB_Device_ProcessControlRequest+0x1fe>
 ae6:	c7 96       	adiw	r24, 0x37	; 55
 ae8:	8d 93       	st	X+, r24
 aea:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aec:	2f 5f       	subi	r18, 0xFF	; 255
 aee:	24 31       	cpi	r18, 0x14	; 20
 af0:	51 f7       	brne	.-44     	; 0xac6 <USB_Device_ProcessControlRequest+0xc6>
				SREG = GlobalIntState;
 af2:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 af4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 af8:	87 7f       	andi	r24, 0xF7	; 247
 afa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 afe:	6a e2       	ldi	r22, 0x2A	; 42
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	ce 01       	movw	r24, r28
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	18 dd       	rcall	.-1488   	; 0x538 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b0c:	8b 77       	andi	r24, 0x7B	; 123
 b0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b12:	a2 cf       	rjmp	.-188    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b14:	90 38       	cpi	r25, 0x80	; 128
 b16:	81 f0       	breq	.+32     	; 0xb38 <USB_Device_ProcessControlRequest+0x138>
 b18:	92 38       	cpi	r25, 0x82	; 130
 b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0x11e>
 b1c:	9d cf       	rjmp	.-198    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b1e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x4>
 b22:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b24:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b28:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b2c:	85 fb       	bst	r24, 5
 b2e:	88 27       	eor	r24, r24
 b30:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b32:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
 b38:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 b3c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_Device_RemoteWakeupEnabled>
 b40:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b42:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 b44:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b48:	97 7f       	andi	r25, 0xF7	; 247
 b4a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b4e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 b52:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b5a:	8e 77       	andi	r24, 0x7E	; 126
 b5c:	a0 c0       	rjmp	.+320    	; 0xc9e <USB_Device_ProcessControlRequest+0x29e>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b5e:	99 23       	and	r25, r25
 b60:	09 f4       	brne	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x164>
 b62:	8d c0       	rjmp	.+282    	; 0xc7e <USB_Device_ProcessControlRequest+0x27e>
 b64:	92 30       	cpi	r25, 0x02	; 2
 b66:	09 f0       	breq	.+2      	; 0xb6a <USB_Device_ProcessControlRequest+0x16a>
 b68:	77 cf       	rjmp	.-274    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b6a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <USB_ControlRequest+0x2>
 b6e:	91 11       	cpse	r25, r1
 b70:	91 c0       	rjmp	.+290    	; 0xc94 <USB_Device_ProcessControlRequest+0x294>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b72:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <USB_ControlRequest+0x4>
 b76:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b78:	09 f4       	brne	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x17c>
 b7a:	6e cf       	rjmp	.-292    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b7c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 b80:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b84:	20 ff       	sbrs	r18, 0
 b86:	86 c0       	rjmp	.+268    	; 0xc94 <USB_Device_ProcessControlRequest+0x294>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b88:	83 30       	cpi	r24, 0x03	; 3
 b8a:	31 f4       	brne	.+12     	; 0xb98 <USB_Device_ProcessControlRequest+0x198>
				UECONX |= (1 << STALLRQ);
 b8c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b90:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 b92:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b96:	7e c0       	rjmp	.+252    	; 0xc94 <USB_Device_ProcessControlRequest+0x294>
				UECONX |= (1 << STALLRQC);
 b98:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b9c:	80 61       	ori	r24, 0x10	; 16
 b9e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ba2:	21 e0       	ldi	r18, 0x01	; 1
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0x1aa>
 ba8:	22 0f       	add	r18, r18
 baa:	9a 95       	dec	r25
 bac:	ea f7       	brpl	.-6      	; 0xba8 <USB_Device_ProcessControlRequest+0x1a8>
 bae:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 bb2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
 bb6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 bba:	88 60       	ori	r24, 0x08	; 8
 bbc:	ea cf       	rjmp	.-44     	; 0xb92 <USB_Device_ProcessControlRequest+0x192>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bbe:	91 11       	cpse	r25, r1
 bc0:	4b cf       	rjmp	.-362    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bc2:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <USB_ControlRequest+0x2>
 bc6:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bc8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 bcc:	80 78       	andi	r24, 0x80	; 128
 bce:	81 2b       	or	r24, r17
 bd0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
 bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bd8:	87 7f       	andi	r24, 0xF7	; 247
 bda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 bde:	9f dd       	rcall	.-1218   	; 0x71e <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
 be4:	80 ff       	sbrs	r24, 0
 be6:	fc cf       	rjmp	.-8      	; 0xbe0 <USB_Device_ProcessControlRequest+0x1e0>
				UDADDR |= (1 << ADDEN);
 be8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 bec:	80 68       	ori	r24, 0x80	; 128
 bee:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bf2:	82 e0       	ldi	r24, 0x02	; 2
 bf4:	11 11       	cpse	r17, r1
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_DeviceState>
 bfc:	2d cf       	rjmp	.-422    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bfe:	c0 96       	adiw	r24, 0x30	; 48
 c00:	73 cf       	rjmp	.-282    	; 0xae8 <USB_Device_ProcessControlRequest+0xe8>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c02:	ae 01       	movw	r20, r28
 c04:	4f 5f       	subi	r20, 0xFF	; 255
 c06:	5f 4f       	sbci	r21, 0xFF	; 255
 c08:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <USB_ControlRequest+0x4>
 c0c:	9e db       	rcall	.-2244   	; 0x34a <CALLBACK_USB_GetDescriptor>
 c0e:	bc 01       	movw	r22, r24
 c10:	89 2b       	or	r24, r25
 c12:	09 f4       	brne	.+2      	; 0xc16 <USB_Device_ProcessControlRequest+0x216>
 c14:	21 cf       	rjmp	.-446    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
 c16:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c1a:	97 7f       	andi	r25, 0xF7	; 247
 c1c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c20:	89 81       	ldd	r24, Y+1	; 0x01
 c22:	9a 81       	ldd	r25, Y+2	; 0x02
 c24:	e8 dc       	rcall	.-1584   	; 0x5f6 <Endpoint_Write_Control_PStream_LE>
 c26:	70 cf       	rjmp	.-288    	; 0xb08 <USB_Device_ProcessControlRequest+0x108>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c28:	90 38       	cpi	r25, 0x80	; 128
 c2a:	09 f0       	breq	.+2      	; 0xc2e <USB_Device_ProcessControlRequest+0x22e>
 c2c:	15 cf       	rjmp	.-470    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
 c2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c32:	87 7f       	andi	r24, 0xF7	; 247
 c34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c38:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_Device_ConfigurationNumber>
				UEDATX = Data;
 c3c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 c40:	8a cf       	rjmp	.-236    	; 0xb56 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c42:	91 11       	cpse	r25, r1
 c44:	09 cf       	rjmp	.-494    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c46:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <USB_ControlRequest+0x2>
 c4a:	92 30       	cpi	r25, 0x02	; 2
 c4c:	08 f0       	brcs	.+2      	; 0xc50 <USB_Device_ProcessControlRequest+0x250>
 c4e:	04 cf       	rjmp	.-504    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
 c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c54:	87 7f       	andi	r24, 0xF7	; 247
 c56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c5a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 c5e:	5f dd       	rcall	.-1346   	; 0x71e <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 c60:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_Device_ConfigurationNumber>
 c64:	88 23       	and	r24, r24
 c66:	11 f0       	breq	.+4      	; 0xc6c <USB_Device_ProcessControlRequest+0x26c>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c68:	84 e0       	ldi	r24, 0x04	; 4
 c6a:	05 c0       	rjmp	.+10     	; 0xc76 <USB_Device_ProcessControlRequest+0x276>
				return (UDADDR & (1 << ADDEN));
 c6c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 c70:	87 fd       	sbrc	r24, 7
 c72:	fa cf       	rjmp	.-12     	; 0xc68 <USB_Device_ProcessControlRequest+0x268>
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 c7a:	ae db       	rcall	.-2212   	; 0x3d8 <EVENT_USB_Device_ConfigurationChanged>
 c7c:	ed ce       	rjmp	.-550    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c7e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <USB_ControlRequest+0x2>
 c82:	91 30       	cpi	r25, 0x01	; 1
 c84:	09 f0       	breq	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x288>
 c86:	e8 ce       	rjmp	.-560    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c88:	91 e0       	ldi	r25, 0x01	; 1
 c8a:	83 30       	cpi	r24, 0x03	; 3
 c8c:	09 f0       	breq	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0x290>
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c94:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
 c98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c9c:	87 7f       	andi	r24, 0xF7	; 247
 c9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 ca2:	3d dd       	rcall	.-1414   	; 0x71e <Endpoint_ClearStatusStage>
 ca4:	d9 ce       	rjmp	.-590    	; 0xa58 <USB_Device_ProcessControlRequest+0x58>

00000ca6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ca6:	08 95       	ret

00000ca8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ca8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 caa:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_DeviceState>
 cae:	88 23       	and	r24, r24
 cb0:	91 f0       	breq	.+36     	; 0xcd6 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cb2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 cb6:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cb8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 cbc:	80 fd       	sbrc	r24, 0
 cbe:	0d c0       	rjmp	.+26     	; 0xcda <USB_USBTask+0x32>
 cc0:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cc2:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ccc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 cce:	98 de       	rcall	.-720    	; 0xa00 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd0:	cf 70       	andi	r28, 0x0F	; 15
 cd2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
 cd6:	cf 91       	pop	r28
 cd8:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cda:	80 e8       	ldi	r24, 0x80	; 128
 cdc:	f2 cf       	rjmp	.-28     	; 0xcc2 <USB_USBTask+0x1a>

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
